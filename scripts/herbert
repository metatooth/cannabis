#!/bin/sh
### BEGIN INIT INFO
# Provides:          Herbert
# Required-Start: $local_fs $network $time $syslog
# Required-Stop: $local_fs $network $time $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start Herbert daemon
# Description: Start Herbert daemon
### END INIT INFO

NAME=herbert
RUN_DIRECTORY=/home/pi/$NAME
INSTALL_DIR=/home/pi/$NAME
DAEMON_PID=/var/run/$NAME.pid
DAEMON="/usr/bin/node $INSTALL_DIR/dist/worker/main.js"
LOGDIR=/var/log

. /lib/lsb/init-functions

do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        start-stop-daemon --start --quiet --background --make-pidfile --pidfile $DAEMON_PID --exec $DAEMON --test > /dev/null \
                || return 1
        if [ "$1" -eq 1 ] ; then
            start-stop-daemon --start --quiet --no-close --background --make-pidfile --pidfile $DAEMON_PID --exec $DAEMON --chdir $RUN_DIRECTORY \
                $DAEMON_ARGS \
                || return 2
        else
            start-stop-daemon --start --quiet --background --make-pidfile --pidfile $DAEMON_PID --exec $DAEMON --chdir $RUN_DIRECTORY -- \
                $DAEMON_ARGS -L$LOGDIR/$NAME\
                || return 2
        fi
}

case "$1" in
    start)
        echo "Listing"
        ls -ld $DAEMON
        log_daemon_msg "Starting $DESC" "$NAME"
        do_start 0
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    start-trace)
        log_daemon_msg "Starting $DESC" "$NAME"
        do_start 1
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        start-stop-daemon --stop --oknodo --pidfile $DAEMON_PID --name $NAME\
            --exec $DAEMON --retry 5
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2
        rm -f $DAEMON_PID
        exit "$RETVAL"
        ;;
    restart)
        $0 stop  && sleep 2
        $0 start
        ;;
    status)
        start-stop-daemon --status --pidfile $DAEMON_PID
        RUNNING=$?
        if [ $RUNNING -eq 0 ]; then
            echo -n "Running ($RUNNING) PID:"
            cat $DAEMON_PID
        else
            echo "NOT Running ($RUNNING)"
        fi
        status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?

        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
esac

exit 0
